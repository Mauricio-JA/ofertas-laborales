// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     Usuario    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         Usuario     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model TipoUsuario {
    id          Int      @id @default(autoincrement())
    nombre      String
    descripcion String

    usuarios    Usuario[]
}

model Usuario {
    id            String    @id @default(cuid())
    nombreUsuario String    @unique
    contrasena    String
    estado        Boolean
    tipoUsuarioId Int

    tipoUsuario   TipoUsuario @relation(fields: [tipoUsuarioId], references: [id])
    accounts      Account[]
    sessions      Session[]  

    persona       Persona?
    empresa       Empresa?
}

model Persona {
    id          String    @id @default(cuid())
    nombre      String
    apellidoPaterno    String
    apellidoMaterno    String
    ci          String
    correo      String
    telefono    String
    direccion   String
    fechaNacimiento DateTime
    nacionalidad String
    estadoCivil  String
    sexo         String
    usuarioId    String  @unique

    usuario      Usuario @relation(fields: [usuarioId], references: [id])
    estudiante   Estudiante?
    administrador Administrador?
}

model Estudiante {
    id          String    @id @default(cuid())
    urlFotoPerfil String
    profesionId  Int
    personaId   String    @unique

    profesion    Profesion @relation(fields: [profesionId], references: [id])
    persona     Persona @relation(fields: [personaId], references: [id])
    estudios    Estudio[]
    experiencias Experiencia[]
    postulaciones Postulacion[]
}

model Administrador {
    id          String    @id @default(cuid())
    personaId   String    @unique

    persona     Persona @relation(fields: [personaId], references: [id])
    ofertasLaboralesRevisadas OfertaLaboral[]
}

model Empresa {
    id          String    @id @default(cuid())
    nombre      String
    nit         String
    direccion   String
    telefono    String
    correo      String
    usuarioId    String  @unique

    usuario      Usuario @relation(fields: [usuarioId], references: [id])
    ofertasLaborales OfertaLaboral[]
}

model Profesion {
    id          Int      @id @default(autoincrement())
    nombre      String

    estudiantes  Estudiante[]
    areasInteres OfertaLaboral[]
}

model Estudio {
    id          Int      @id @default(autoincrement())
    nombre      String
    lugar      String
    fechaInicio DateTime
    fechaFin    DateTime
    estudianteId String

    estudiante   Estudiante @relation(fields: [estudianteId], references: [id])
}

model Experiencia {
    id          Int      @id @default(autoincrement())
    cargo       String
    nombreEmpresa String
    descripcion String
    fechaInicio DateTime
    fechaFin    DateTime
    estudianteId String

    estudiante   Estudiante @relation(fields: [estudianteId], references: [id])
}

enum EnumTipoTrabajo {
    TIEMPO_COMPLETO
    TIEMPO_PARCIAL
    TIEMPO_LIBRE
    TEMPORAL
    CONSULTORIA
    PASANTIA
}

enum EstadoOfertaLaboral {
    ACTIVA
    REVISION
    INACTIVA
    ADQUIRIDA_INSTITUCION
    ADQUIRIDA_EXTERNA
}
model OfertaLaboral {
    id          String    @id @default(cuid())
    titulo      String
    descripcion String
    tipoTrabajo EnumTipoTrabajo
    ubicacion   String
    vacantes    Int
    fechaPublicacion DateTime
    estado      EstadoOfertaLaboral
    administradorId String
    empresaId   String

    empresa     Empresa @relation(fields: [empresaId], references: [id])
    administrador Administrador @relation(fields: [administradorId], references: [id])
    postulaciones Postulacion[]
    areasInteres Profesion[]
}

model Postulacion {
    id          String    @id @default(cuid())
    fechaPostulacion DateTime
    estado      Boolean
    estudianteId String
    ofertaLaboralId String

    estudiante   Estudiante @relation(fields: [estudianteId], references: [id])
    ofertaLaboral OfertaLaboral @relation(fields: [ofertaLaboralId], references: [id])
}